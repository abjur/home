paste0(c('', 'n: '), format(x)[-2], collapse = "<br />")
}
plotar_barras <- function(input) {
if (input$res == 'Resultados') {
if (input$quebra != 'Nada') {
dados() %>%
count_(vars = c(input$quebra, 'resultado')) %>%
replace_na(setNames(list('VAZIO'), input$quebra)) %>%
mutate(prop = n / sum(n)) %>%
ggvis(x = as.formula(paste('~', input$quebra)), y = ~prop,
fill = ~resultado,
fillOpacity := 0.5) %>%
layer_bars(stack = TRUE, width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
add_tooltip(all_barras, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%')
} else {
# so resultados (default)
dados() %>%
ggvis(x = ~resultado, fillOpacity := 0.5) %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%')
}
} else {
if(input$quebra != 'Nada') {
# mostrar quebrado por variavel
dados() %>%
ggvis(x = as.formula(paste0('~', input$quebra)),
fillOpacity := 0.5) %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%')
} else {
# mostrar volume
dados() %>%
ggvis(x = ~resultado, fillOpacity := 0.5, fill := 'royalblue') %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%')
}
}
}
plotar_barras(list(res = 'Resultados', quebra = as.character(quebras[2])))
plotar_barras(list(res = 'Resultados', quebra = 'Nada'))
plotar_mes(list(res = 'Volume', quebra = 'Nada'))
plotar_barras(list(res = 'Volume', quebra = 'Nada'))
dados() %>%
ggvis(x = ~resultado, fillOpacity := 0.5, fill := 'royalblue') %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%')
?add_tooltip
plotar_barras(list(res = 'Resultados', quebra = as.character(quebras[2])))
all_values <- function(x) {
if (is.null(x)) return(NULL)
paste(c('Resultado:', 'Tributo:', 'Proporção:'),
c(x[1], x[2], round((x[4] - x[3]) * 100, 2)),
collapse = '<br />')
}
all_barras <- function(x) {
if (is.null(x)) return(NULL)
paste(c('Resultado:', paste0(names(x)[2], ':'), 'Proporção:'),
c(x[1], x[2], round((x[4] - x[3]) * 100, 2)),
collapse = '<br />')
}
all_values2 <- function(x) {
if (is.null(x)) return(NULL)
paste0(c('', 'n: '), format(x)[-2], collapse = "<br />")
}
plotar_barras <- function(input) {
if (input$res == 'Resultados') {
if (input$quebra != 'Nada') {
dados() %>%
count_(vars = c(input$quebra, 'resultado')) %>%
replace_na(setNames(list('VAZIO'), input$quebra)) %>%
mutate(prop = n / sum(n)) %>%
ggvis(x = as.formula(paste('~', input$quebra)), y = ~prop,
fill = ~resultado,
fillOpacity := 0.5) %>%
layer_bars(stack = TRUE, width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_barras, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%')
} else {
# so resultados (default)
dados() %>%
ggvis(x = ~resultado, fillOpacity := 0.5) %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%')
}
} else {
if(input$quebra != 'Nada') {
# mostrar quebrado por variavel
dados() %>%
ggvis(x = as.formula(paste0('~', input$quebra)),
fillOpacity := 0.5,
fill := 'royalblue') %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%')
} else {
# mostrar volume
dados() %>%
ggvis(x = ~resultado, fillOpacity := 0.5, fill := 'royalblue') %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%')
}
}
}
plotar_barras(list(res = 'Resultados', quebra = as.character(quebras[2])))
plotar_barras(list(res = 'Volume', quebra = as.character(quebras[2])))
plotar_barras(list(res = 'Resultados', quebra = 'Nada'))
plotar_barras(list(res = 'Volume', quebra = 'Nada'))
d <- dados() %>%
count(uf) %>%
inner_join(coord_uf, c('uf' = 'id')) %>%
mutate(res = sqrt(n / 10)) %>%
data.frame()
tiles <- 'http://{s}.tiles.mapbox.com/v3/jtrecenti.map-oskm8vhn/{z}/{x}/{y}.png'
attrib <- 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
leaflet(d) %>%
addTiles(urlTemplate = tiles,
attribution = attrib) %>%
addCircleMarkers(lng = ~lon , lat = ~lat, data = d, radius = ~res,
popup = ~paste(uf, n, sep = '<br />'))
n <- nrow(dados())
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
)
library(shinydashboard)
n <- nrow(dados())
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
)
library(shinydashboard)
n <- nrow(dados())
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
)
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
) %>% HTML()
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
) %>% as.character()
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
) %>% as.character() %>%
HTML()
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
) %>% as.character()
library(shinydashboard)
n <- nrow(dados())
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
) %>%
as.character() %>%
HTML()
library(shinydashboard)
n <- nrow(dados())
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
) %>%
as.character() %>%
HTML()
library(shinydashboard)
n <- nrow(dados())
valueBox(
format(n, big.mark = '.', decimal = ','),
"Acórdaos",
icon = icon("fa fa-database"),
color = "aqua"
) %>%
as.character()
dados() %>%
count(tributos, resultado) %>%
mutate(prop = n / sum(n)) %>%
ggvis(x = ~tributos, y = ~prop,
fill = ~resultado,
fillOpacity := 0.5) %>%
layer_bars(stack = TRUE, width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
add_tooltip(all_values, 'hover') %>%
hide_legend('fill') %>%
set_options(width = 'auto', height = 'auto') %>%
bind_shiny('graftrib')
dados() %>%
count(tributos, resultado) %>%
mutate(prop = n / sum(n)) %>%
ggvis(x = ~tributos, y = ~prop,
fill = ~resultado,
fillOpacity := 0.5) %>%
layer_bars(stack = TRUE, width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_values, 'hover') %>%
hide_legend('fill') %>%
set_options(width = 'auto', height = 'auto')
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
dados() %>%
count(tributos, resultado) %>%
mutate(prop = n / sum(n)) %>%
ggvis(x = ~tributos, y = ~prop,
fill = ~resultado,
fillOpacity := 0.5) %>%
layer_bars(stack = TRUE, width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_values, 'hover') %>%
# hide_legend('fill') %>%
set_options(width = 'auto', height = 'auto')
dados()$camara
input$secao <- unique(dados()$secao)
input$secao
input$secao <- "PRIMEIRA SECAO"
sec <- input$secao
# cam <- input$camara
# tur <- input$turma
if(input$secao == 'CSRF') {
cam <- unique(dados()$camara)
tur <- unique(dados()$turma)
} else {
cam <- unique(dados()$camara)
tur <- unique(dados()$turma)
}
d <- filter(dados(), secao %in% sec, camara %in% cam, turma %in% tur)
if(nrow(d) > 0) {
d %>%
ggvis(x = ~resultado, fillOpacity := 0.5) %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%', height = 800) %>%
bind_shiny('graf_turmas')
} else {
data.frame(x = character()) %>%
ggvis(~x) %>% layer_bars() %>%
set_options(width = '90%', height = 800) %>%
bind_shiny('graf_turmas')
}
input$secao <- "PRIMEIRA SECAO"
sec <- input$secao
# cam <- input$camara
# tur <- input$turma
if(input$secao == 'CSRF') {
cam <- unique(dados()$camara)
tur <- unique(dados()$turma)
} else {
cam <- unique(dados()$camara)
tur <- unique(dados()$turma)
}
d <- filter(dados(), secao %in% sec, camara %in% cam, turma %in% tur)
if(nrow(d) > 0) {
d %>%
ggvis(x = ~resultado, fillOpacity := 0.5) %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%', height = 800)
} else {
data.frame(x = character()) %>%
ggvis(~x) %>% layer_bars() %>%
set_options(width = '90%', height = 800)
}
por_secao(input$secao <- "PRIMEIRA SECAO")
por_secao <- function(input) {
sec <- input$secao
# cam <- input$camara
# tur <- input$turma
if(input$secao == 'CSRF') {
cam <- unique(dados()$camara)
tur <- unique(dados()$turma)
} else {
cam <- unique(dados()$camara)
tur <- unique(dados()$turma)
}
d <- filter(dados(), secao %in% sec, camara %in% cam, turma %in% tur)
if(nrow(d) > 0) {
d %>%
ggvis(x = ~resultado, fillOpacity := 0.5) %>%
layer_bars(width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_values2, 'hover') %>%
hide_legend('fill') %>%
set_options(width = '90%', height = 800)
} else {
data.frame(x = character()) %>%
ggvis(~x) %>% layer_bars() %>%
set_options(width = '90%', height = 800)
}
}
por_secao(input$secao <- "PRIMEIRA SECAO")
por_secao((input$secao <- "PRIMEIRA SECAO"))
por_secao(list(secao = "PRIMEIRA SECAO")
)
tabela_conselheiros <- function(input) {
d <- dados() %>%
group_by(relator) %>%
mutate(n_relator = n()) %>%
ungroup %>% {
dd <- filter(., n_relator > input$cortar)
if (nrow(dd) > 0) dd else .
} %>%
count(relator, n_relator, tipo, resultado) %>%
mutate(porc_num = n / sum(n),
porc = scales::percent(porc_num)) %>%
ungroup %>%
select(-porc_num, -n) %>%
spread(resultado, porc)
d
}
tabela_conselheiros(list(cortar = 100))
tabela_conselheiros <- function(input) {
d <- dados() %>%
group_by(relator) %>%
mutate(n_relator = n()) %>%
ungroup %>% {
dd <- filter(., n_relator > input$cortar)
if (nrow(dd) > 0) dd else .
} %>%
count(relator, n_relator, tipo, resultado) %>%
mutate(porc_num = n / sum(n),
porc = scales::percent(porc_num)) %>%
ungroup %>%
select(-n) %>%
spread(resultado, porc)
DT::datatable(d)
}
tabela_conselheiros(list(cortar = 100))
plotar_barras(list(res = 'Resultados', quebra = as.character(quebras[2])))
plotar_barras(list(res = 'Resultados', quebra = 'Nada'))
plotar_barras(list(res = 'Volume', quebra = 'Nada'))
plotar_barras(list(res = 'Resultados', quebra = 'Nada'))
plotar_barras(list(res = 'Volume', quebra = as.character(quebras[2])))
plotar_mes(list(res = 'Resultados', quebra = 'Nada'))
plotar_mes(list(res = 'Volume', quebra = 'Nada'))
dados() %>%
count(tributos, resultado) %>%
mutate(prop = n / sum(n)) %>%
ggvis(x = ~tributos, y = ~prop,
fill = ~resultado,
fillOpacity := 0.5) %>%
layer_bars(stack = TRUE, width = 1.0) %>%
add_axis("x", properties = axis_props(
labels = list(angle = -45, align = "right", fontSize = 15))) %>%
# add_tooltip(all_values, 'hover') %>%
# hide_legend('fill')
identity()
`%>%`
`%>2%` <- function(lhs, rhs) {
if (missing(rhs)) lhs else lhs %>% rhs
}
a %>2%
a %>2%
2
sum
a %>2% sum
blogdown::serve_site()
library(magick)
path <- '~/abj/home/content/evento/assets/img/team/fabioUlhoa.png'
m <- image_read(path)
m
ex <- '~/abj/home/content/evento/assets/img/team/manoelCalcas.png'
ex
m_ex <- image_read(ex)
m_ex
ex <- '~/abj/home/content/evento/assets/img/team/ivoWaisberg.png'
m_ex <- image_read(ex)
m_ex
ex <- '~/abj/home/content/evento/assets/img/team/ivoWaisberg370.png'
m_ex <- image_read(ex)
m_ex
image_crop(m, '370x370')
image_scale(m, '370')
image_scale(m, '370') %>%
image_crop('370x370')
library(magrittr)
image_scale(m, '370') %>%
image_crop('370x370')
m_ex
m103 <- image_scale(m, '370') %>%
image_crop('370x370') %>%
image_scale(m, '103')
m103 <- image_scale(m, '370') %>%
image_crop('370x370') %>%
image_scale('103')
m103
image_write(m370, '~/abj/home/content/evento/assets/img/team/fabioUlhoa370.png')
m370 <- image_scale(m, '370') %>%
image_crop('370x370')
m103 <- image_scale(m, '370') %>%
image_crop('370x370') %>%
image_scale('103')
image_write(m370, '~/abj/home/content/evento/assets/img/team/fabioUlhoa370.png')
image_write(m103, '~/abj/home/content/evento/assets/img/team/fabioUlhoa.png')
blogdown::serve_site()
stringr::str_replace(c('A,B,C'), ',([^,]*$)', '\\1')
stringr::str_split(c('A,B,C'), ',([^,]*$)', '\\1')
stringr::str_split(c('A,B,C'), ',([^,]*$)')
?influence.measures
m <- lm(mpg ~ ., data = mtcars)
dffits(m)
m2 <- lm(factor(am)~., data = mtcars, family = binomial)
m2 <- lm(factor(am)~., data = mtcars, family = "binomial")
m2 <- lm(am~., data = mtcars, family = binomial)
m2 <- glm(am~., data = mtcars, family = binomial)
m2 <- glm(factor(am)~., data = mtcars, family = binomial)
m2 <- glm(am ~ mpg + cyl, data = mtcars, family = binomial)
m2
dffits(m2)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
dffits(m2)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
devtools::install_github('rstudio/blogdown')
devtools::install_github('rstudio/blogdown')
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
file.copy('~/Downloads/20170815_jt.pdf', 'static/pre2.pdf')
file.copy('~/jurimetria/user2017/apresentacao.pdf', 'static/eped2017.pdf')
library(tjsp)
s <- cjsg_session()
parms <- cjsg_parms(s, livre = 'alguma coisa') #ou outros parms
s <- cjsg_session()
parms <- cjsg_parms(s, livre = 'alguma coisa') #ou outros parms
cjsg(s, parms, max_pag = 2) # baixa
?cjsg
blogdown::serve_site()
