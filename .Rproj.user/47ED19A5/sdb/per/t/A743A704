{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Boletim CARF 02/2017\"\nauthor: \"Julio Trecenti\"\ndate: 2017-01-27T09:23:47-02:00\ntags: ['CARF', 'boletim']\nbanner: \"img/banners/banner-10.png\"\ndraft: true\n---\n\n> Atenção! A partir de abril / 2017, vamos lançar \n> boletins mensais com análises de alguns órgãos da Justiça.\n> Os relatórios são gerados automaticamente.\n\n```{r echo=F}\nknitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, eval=FALSE)\n```\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(dygraphs)\nlibrary(leaflet)\nlibrary(tidyr)\nlibrary(ggvis)\n\nd_vis <- readRDS('/home/jtrecenti/abj/viscarf/data/d_vis.rds') %>% \n  filter(!is.na(data_pub)) %>% \n  select(-n)\nload('/home/jtrecenti/abj/viscarf/data/cadmun.rda')\nload('/home/jtrecenti/abj/viscarf/data/coord_uf.RData')\n\nufs <- c(sort(unique(as.character(cadmun$uf))), 'VAZIO')\nsecoes <- c('PRIMEIRA SECAO', 'SEGUNDA SECAO', 'TERCEIRA SECAO', 'CSRF')\ncamaras <- c(paste(1:4, 'a CAMARA', sep = ''))\nturmas <- c(paste(1:3, 'a TURMA', sep = ''), 'TURMA ESPECIAL')\n\nquebras <- c('Nada' = 'Nada', \n             'Seção de julgamento' = 'secao', \n             'Votacao' = 'votacao',\n             'Tipo de pessoa' = 'tipo_pessoa',\n             'Tipo de relator' = 'tipo')\n\ninput <- list(quebra = as.character(quebras[2]))\n\ndados <- function() d_vis\n```\n\n```{r eval=FALSE}\nd <- dados() %>%\n  filter(resultado == 'DESFAVORAVEL') %>%\n  group_by_(.dots = c(input$quebra, 'resultado')) %>%\n  arrange_(.dots = c(input$quebra, 'data_pub')) %>%\n  mutate(um = 1, acu = cumsum(um) / sum(um)) %>%\n  ungroup() %>%\n  select_(.dots = c(input$quebra, 'data_pub', 'acu')) %>%\n  tibble::rownames_to_column() %>%\n  spread_(input$quebra, 'acu') %>%\n  select(-rowname)\ndxts <- xts::xts(d[, -1], d$data_pub)\np <- dygraph(dxts) %>%\n  dyOptions(drawPoints = FALSE, stepPlot = TRUE,\n            fillGraph = FALSE,\n            stackedGraph = FALSE,\n            strokeWidth = 2, colorValue = .8,\n            includeZero = TRUE,\n            animatedZooms = TRUE,\n            drawGapEdgePoints = TRUE,\n            connectSeparatedPoints = TRUE)\np\n```\n\n```{r eval=FALSE}\nd <- dados() %>%\n  group_by_(.dots = c('resultado')) %>%\n  arrange_(.dots = c('data_pub')) %>%\n  mutate(um = 1, acu = cumsum(um) / sum(um)) %>%\n  ungroup %>%\n  select_(.dots = c('resultado', 'data_pub', 'acu')) %>%\n  tibble::rownames_to_column() %>%\n  spread_('resultado', 'acu') %>%\n  select(-rowname)\ndxts <- xts::xts(d[, -1], d$data_pub)\np <- dygraph(dxts) %>%\n  dyOptions(drawPoints = FALSE, stepPlot = TRUE,\n            fillGraph = FALSE,\n            stackedGraph = FALSE,\n            strokeWidth = 2, colorValue = .8,\n            includeZero = TRUE,\n            animatedZooms = TRUE,\n            drawGapEdgePoints = TRUE,\n            connectSeparatedPoints = TRUE)\np\n```\n\n```{r eval=FALSE}\n#mostrar quebrado por variavel\nd <- dados() %>%\n  group_by_(.dots = c(input$quebra)) %>%\n  arrange_(.dots = c('data_pub')) %>%\n  mutate(um = 1, acu = cumsum(um) / sum(um)) %>%\n  ungroup %>%\n  select_(.dots = c(input$quebra, 'data_pub', 'acu')) %>%\n  tibble::rownames_to_column() %>%\n  spread_(input$quebra, 'acu') %>%\n  select(-rowname)\n\ndxts <- xts::xts(d[, -1], d$data_pub)\n\np <- dygraph(dxts) %>%\n  dyOptions(drawPoints = FALSE, stepPlot = TRUE,\n            fillGraph = FALSE,\n            stackedGraph = FALSE,\n            strokeWidth = 2, colorValue = .8,\n            includeZero = TRUE,\n            animatedZooms = TRUE,\n            drawGapEdgePoints = TRUE,\n            connectSeparatedPoints = TRUE)\np\n```\n\n```{r eval=FALSE}\n#mostrar volume\nd <- dados() %>% \n  arrange(data_pub) %>%\n  mutate(um = 1, acu = cumsum(um)) %>%\n  select(data_pub, acu)\n\ndxts <- xts::xts(d[, -1], d$data_pub)\n\np <- dxts %>%\n  dygraph() %>%\n  dyOptions(fillGraph = FALSE, \n            drawPoints = FALSE, \n            strokeWidth = 2, \n            colorValue = .8, \n            includeZero = TRUE,\n            animatedZooms = TRUE, \n            colors = 'blue')\np\n```\n\n```{r}\nplotar_mes <- function(input) {\n  d <- dados() %>%\n  mutate(mes_ano = as.Date(sprintf('%04d-%02d-01', \n                                   year(data_pub), \n                                   month(data_pub))))\n  if (input$res == 'Resultados') {\n    if (input$quebra != 'Nada') {\n      # quebrar com resultados\n      d <- d %>% \n        count_(vars = c('mes_ano', input$quebra, 'resultado')) %>%\n        replace_na(setNames(list('VAZIO'), input$quebra)) %>% \n        mutate(prop = n / sum(n) * 100) %>%\n        ungroup %>%\n        filter(resultado == 'DESFAVORAVEL') %>%\n        select(-resultado, -n) %>%\n        spread_(input$quebra, 'prop')\n      dxts <- xts::xts(d[, -1], d$mes_ano)\n      p <- dygraph(dxts,\n                   main = 'Proporçao de decisoes desfavoráveis') %>%\n        dyOptions(drawPoints = TRUE, \n                  stackedGraph = input$stack,\n                  strokeWidth = 2, colorValue = .8,\n                  includeZero = TRUE,\n                  animatedZooms = TRUE,\n                  drawGapEdgePoints = TRUE,\n                  connectSeparatedPoints = TRUE)\n    } else {\n      # so resultados (default)\n      d <- d %>% \n        count(mes_ano, resultado) %>%\n        mutate(prop = n / sum(n) * 100) %>%\n        select(-n) %>%\n        spread(resultado, prop)\n      \n      dxts <- xts::xts(d[, -1], d$mes_ano)\n      \n      p <- dygraph(dxts) %>%\n        dyOptions(drawPoints = TRUE, \n                  stackedGraph = input$stack,\n                  strokeWidth = 2, colorValue = .8, \n                  includeZero = TRUE,\n                  animatedZooms = TRUE)\n    }\n  } else {\n    if (input$quebra != 'Nada') {\n      #mostrar quebrado por variavel\n      d <- d %>% \n        count_(vars = c('mes_ano', input$quebra)) %>%\n        replace_na(setNames(list('VAZIO'), input$quebra)) %>% \n        mutate(prop = n / sum(n) * 100) %>%\n        select(-prop) %>%\n        spread_(input$quebra, 'n')\n      dxts <- xts::xts(d[, -1], d$mes_ano)\n      p <- dygraph(dxts) %>%\n        dyOptions(drawPoints = TRUE, \n                  stackedGraph = input$stack,\n                  strokeWidth = 2, colorValue = .8, \n                  includeZero = TRUE,\n                  animatedZooms = TRUE)\n    } else {\n      #mostrar volume\n      d <- d %>% count(mes_ano)\n      dxts <- xts::xts(d[, -1], d$mes_ano)\n      \n      p <- dxts %>%\n        dygraph() %>%\n        dyOptions(fillGraph = TRUE, drawPoints = TRUE, \n                  strokeWidth = 2, colorValue = .8, \n                  includeZero = TRUE,\n                  animatedZooms = TRUE, \n                  colors = 'blue')\n    }\n  }\n  p %>%\n    dyHighlight(highlightCircleSize = 5, \n                highlightSeriesBackgroundAlpha = 0.2,\n                hideOnMouseOut = FALSE) %>%\n    dyLegend(show = \"onmouseover\", \n             hideOnMouseOut = TRUE,\n             width = 600)\n}\n\n```\n\n```{r}\nall_values <- function(x) {\n  if (is.null(x)) return(NULL)\n  paste(c('Resultado:', 'Tributo:', 'Proporção:'),\n        c(x[1], x[2], round((x[4] - x[3]) * 100, 2)),\n        collapse = '<br />')\n}\nall_barras <- function(x) {\n  if (is.null(x)) return(NULL)\n  paste(c('Resultado:', paste0(names(x)[2], ':'), 'Proporção:'),\n        c(x[1], x[2], round((x[4] - x[3]) * 100, 2)),\n        collapse = '<br />')\n}\n\nall_values2 <- function(x) {\n  if (is.null(x)) return(NULL)\n  paste0(c('', 'n: '), format(x)[-2], collapse = \"<br />\")\n}\nplotar_barras <- function(input) {\n  if (input$res == 'Resultados') {\n    if (input$quebra != 'Nada') {\n      dados() %>% \n        count_(vars = c(input$quebra, 'resultado')) %>%\n        replace_na(setNames(list('VAZIO'), input$quebra)) %>% \n        mutate(prop = n / sum(n)) %>%\n        ggvis(x = as.formula(paste('~', input$quebra)), y = ~prop, \n              fill = ~resultado,\n              fillOpacity := 0.5) %>% \n        layer_bars(stack = TRUE, width = 1.0) %>%\n        add_axis(\"x\", properties = axis_props(\n          labels = list(angle = -45, align = \"right\", fontSize = 15))) %>%\n        # add_tooltip(all_barras, 'hover') %>%\n        hide_legend('fill') %>%\n        set_options(width = '90%')\n    } else {\n      # so resultados (default)\n      dados() %>% \n        ggvis(x = ~resultado, fillOpacity := 0.5) %>% \n        layer_bars(width = 1.0) %>%\n        add_axis(\"x\", properties = axis_props(\n          labels = list(angle = -45, align = \"right\", fontSize = 15))) %>%\n        # add_tooltip(all_values2, 'hover') %>%\n        hide_legend('fill') %>%\n        set_options(width = '90%')\n    }\n  } else {\n    if(input$quebra != 'Nada') {\n      # mostrar quebrado por variavel\n      dados() %>% \n        ggvis(x = as.formula(paste0('~', input$quebra)), \n              fillOpacity := 0.5,\n              fill := 'royalblue') %>% \n        layer_bars(width = 1.0) %>%\n        add_axis(\"x\", properties = axis_props(\n          labels = list(angle = -45, align = \"right\", fontSize = 15))) %>%\n        # add_tooltip(all_values2, 'hover') %>%\n        hide_legend('fill') %>%\n        set_options(width = '90%')\n    } else {\n      # mostrar volume\n      dados() %>%\n        ggvis(x = ~resultado, fillOpacity := 0.5, fill := 'royalblue') %>% \n        layer_bars(width = 1.0) %>%\n        add_axis(\"x\", properties = axis_props(\n          labels = list(angle = -45, align = \"right\", fontSize = 15))) %>%\n        # add_tooltip(all_values2, 'hover') %>%\n        hide_legend('fill') %>%\n        set_options(width = '90%')\n    }\n  }\n}\n```\n\n## Resultados e volume no mês\n\n```{r}\n# plotar_mes(list(res = 'Resultados', quebra = as.character(quebras[2])))\n# plotar_mes(list(res = 'Volume', quebra = as.character(quebras[2])))\nplotar_mes(list(res = 'Resultados', quebra = 'Nada'))\nplotar_mes(list(res = 'Volume', quebra = 'Nada'))\n```\n\n## Resultados\n\n```{r}\n# plotar_barras(list(res = 'Resultados', quebra = as.character(quebras[2])))\n# plotar_barras(list(res = 'Volume', quebra = as.character(quebras[2])))\nplotar_barras(list(res = 'Resultados', quebra = 'Nada'))\n# plotar_barras(list(res = 'Volume', quebra = 'Nada'))\n```\n\n## Mapa da UF de origem dos recursos\n\n```{r}\nd <- dados() %>%\n  count(uf) %>%\n  inner_join(coord_uf, c('uf' = 'id')) %>%\n  mutate(res = sqrt(n / 10)) %>%\n  data.frame()\ntiles <- 'http://{s}.tiles.mapbox.com/v3/jtrecenti.map-oskm8vhn/{z}/{x}/{y}.png'\nattrib <- 'Maps by <a href=\"http://www.mapbox.com/\">Mapbox</a>'\nleaflet(d) %>% \n  addTiles(urlTemplate = tiles,\n           attribution = attrib) %>%\n  addCircleMarkers(lng = ~lon , lat = ~lat, data = d, radius = ~res, \n                   popup = ~paste(uf, n, sep = '<br />'))\n\n```\n\n```{r}\ndados() %>% \n  count(tributos, resultado) %>%\n  mutate(prop = n / sum(n)) %>%\n  ggvis(x = ~tributos, y = ~prop, \n        fill = ~resultado,\n        fillOpacity := 0.5) %>% \n  layer_bars(stack = TRUE, width = 1.0) %>%\n  add_axis(\"x\", properties = axis_props(\n    labels = list(angle = -45, align = \"right\", fontSize = 15))) %>%\n  # add_tooltip(all_values, 'hover') %>%\n  # hide_legend('fill') \n  identity()\n```\n\n## Resultados por Seção de Julgamento\n\n```{r}\npor_secao <- function(input) {\n  sec <- input$secao\n  # cam <- input$camara\n  # tur <- input$turma\n  if(input$secao == 'CSRF') {\n    cam <- unique(dados()$camara)\n    tur <- unique(dados()$turma)\n  } else {\n    cam <- unique(dados()$camara)\n    tur <- unique(dados()$turma)\n  }\n  d <- filter(dados(), secao %in% sec, camara %in% cam, turma %in% tur)\n  if(nrow(d) > 0) {\n    d %>%\n      ggvis(x = ~resultado, fillOpacity := 0.5) %>% \n      layer_bars(width = 1.0) %>%\n      add_axis(\"x\", properties = axis_props(\n        labels = list(angle = -45, align = \"right\", fontSize = 15))) %>%\n      # add_tooltip(all_values2, 'hover') %>%\n      hide_legend('fill') %>%\n      set_options(width = '90%', height = 800)\n  } else {\n    data.frame(x = character()) %>% \n      ggvis(~x) %>% layer_bars() %>%\n      set_options(width = '90%', height = 800)\n  }\n}\n```\n\n```{r}\npor_secao(list(secao = \"PRIMEIRA SECAO\"))\npor_secao(list(secao = \"SEGUNDA SECAO\"))\npor_secao(list(secao = \"TERCEIRA SECAO\"))\npor_secao(list(secao = \"CSRF\"))\n```\n\n## Dedo duro dos conselheiros\n\n```{r}\ntabela_conselheiros <- function(input) {\n  d <- dados() %>%\n    group_by(relator) %>%\n    mutate(n_relator = n()) %>%\n    ungroup %>% {\n      dd <- filter(., n_relator > input$cortar)\n      if (nrow(dd) > 0) dd else .\n    } %>%\n    count(relator, n_relator, tipo, resultado) %>%\n    mutate(porc_num = n / sum(n),\n           porc = scales::percent(porc_num)) %>%\n    ungroup %>%\n    select(-n) %>%\n    spread(resultado, porc)\n  DT::datatable(d)\n}\n```\n\n```{r}\ntabela_conselheiros(list(cortar = 100))\n```\n\n",
    "created" : 1495827041702.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3011925502",
    "id" : "A743A704",
    "lastKnownWriteTime" : 1490616719,
    "last_content_update" : 1490616719,
    "path" : "~/abj/home/content/blog/2017-03-25-boletim-carf.Rmd",
    "project_path" : "content/blog/2017-03-25-boletim-carf.Rmd",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}